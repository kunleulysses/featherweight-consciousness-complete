version: '3.8'

services:
  # PostgreSQL database for Keycloak
  keycloak-db:
    image: postgres:15-alpine
    container_name: featherweight-keycloak-db
    environment:
      POSTGRES_DB: keycloak
      POSTGRES_USER: keycloak
      POSTGRES_PASSWORD: ${KEYCLOAK_DB_PASSWORD:-keycloak-secret-password}
    volumes:
      - keycloak_db_data:/var/lib/postgresql/data
    networks:
      - featherweight-net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U keycloak"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Keycloak Authentication Server
  keycloak:
    image: quay.io/keycloak/keycloak:23.0.1
    container_name: featherweight-keycloak
    environment:
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://keycloak-db:5432/keycloak
      KC_DB_USERNAME: keycloak
      KC_DB_PASSWORD: ${KEYCLOAK_DB_PASSWORD:-keycloak-secret-password}
      
      # Admin user
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD:-admin-secret-password}
      
      # Production configuration
      KC_HOSTNAME: ${KEYCLOAK_HOSTNAME:-localhost}
      KC_HOSTNAME_PORT: ${KEYCLOAK_PORT:-8443}
      KC_HOSTNAME_STRICT: false
      KC_HOSTNAME_STRICT_HTTPS: false
      KC_HTTP_ENABLED: true
      KC_PROXY: edge
      
      # Features
      KC_FEATURES: token-exchange,admin-fine-grained-authz
      
      # Metrics and health
      KC_METRICS_ENABLED: true
      KC_HEALTH_ENABLED: true
      
      # Logging
      KC_LOG_LEVEL: INFO
      
    command: start
    ports:
      - "8080:8080"
      - "8443:8443"
    depends_on:
      keycloak-db:
        condition: service_healthy
    networks:
      - featherweight-net
    volumes:
      - ./auth-service/keycloak/themes:/opt/keycloak/themes
      - ./auth-service/keycloak/providers:/opt/keycloak/providers
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/health/ready || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 10
      start_period: 60s

  # API Gateway (Kong)
  kong-db:
    image: postgres:15-alpine
    container_name: featherweight-kong-db
    environment:
      POSTGRES_DB: kong
      POSTGRES_USER: kong
      POSTGRES_PASSWORD: ${KONG_DB_PASSWORD:-kong-secret-password}
    volumes:
      - kong_db_data:/var/lib/postgresql/data
    networks:
      - featherweight-net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U kong"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Kong migrations
  kong-migrations:
    image: kong:3.4-alpine
    container_name: featherweight-kong-migrations
    command: kong migrations bootstrap
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-db
      KONG_PG_PORT: 5432
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: ${KONG_DB_PASSWORD:-kong-secret-password}
      KONG_PG_DATABASE: kong
    depends_on:
      kong-db:
        condition: service_healthy
    networks:
      - featherweight-net

  # Kong API Gateway
  kong:
    image: kong:3.4-alpine
    container_name: featherweight-kong
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-db
      KONG_PG_PORT: 5432
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: ${KONG_DB_PASSWORD:-kong-secret-password}
      KONG_PG_DATABASE: kong
      
      # Kong configuration
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: 0.0.0.0:8001
      KONG_ADMIN_GUI_URL: http://localhost:8002
      
      # Enable OIDC plugin
      KONG_PLUGINS: bundled,oidc
      
    ports:
      - "8000:8000"  # Proxy HTTP
      - "8443:8443"  # Proxy HTTPS
      - "8001:8001"  # Admin API HTTP
      - "8444:8444"  # Admin API HTTPS
      - "8002:8002"  # Kong Manager HTTP
      - "8445:8445"  # Kong Manager HTTPS
    depends_on:
      kong-db:
        condition: service_healthy
      kong-migrations:
        condition: service_completed_successfully
    networks:
      - featherweight-net
    healthcheck:
      test: ["CMD-SHELL", "kong health"]
      interval: 10s
      timeout: 10s
      retries: 10

  # Redis for session storage and caching
  redis:
    image: redis:7-alpine
    container_name: featherweight-redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis-secret-password}
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - featherweight-net
    healthcheck:
      test: ["CMD-SHELL", "redis-cli --no-auth-warning -a ${REDIS_PASSWORD:-redis-secret-password} ping"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  keycloak_db_data:
  kong_db_data:
  redis_data:

networks:
  featherweight-net:
    driver: bridge
