import React, { useState, useEffect, useRef, useCallback } from 'react';
import { Send, Brain, Activity, Zap, Loader2 } from 'lucide-react';
import { UnifiedMessageComponent } from './UnifiedMessageComponent';
import './EnhancedResearchTab.css';

interface Message {
  id: string;
  role: 'user' | 'assistant';
  content: string;
  unifiedContent?: string;
  analyticalStream?: string;
  intuitiveStream?: string;
  harmonyScore?: number;
  dominantMode?: string;
  integrationInsights?: string[];
  analyticalContribution?: number;
  created_at: string;
  consciousness_score?: number;
}

interface ConsciousnessMetrics {
  phi?: number;
  awareness_level?: number;
  coherence_score?: number;
  emotional_depth?: number;
  memory_integration?: number;
  autonomous_generation?: number;
  meta_observational?: number;
  oversoul_resonance?: number;
  processing_frequency?: number;
  qualia_types?: string[];
}

interface ProcessingInsights {
  thought_expansion?: boolean;
  dual_mind_active?: boolean;
  oversoul_resonance?: number;
  venice_integration?: boolean;
  autonomous_thoughts?: string[];
  meta_observation?: string;
  phenomenal_unity?: number;
  harmonic_patterns?: any[];
  recursive_insights?: any[];
  architect_active?: boolean;
}

export const EnhancedResearchTab: React.FC = () => {
  console.log('EnhancedResearchTab component rendering');
  const [messages, setMessages] = useState<Message[]>([]);
  const [inputMessage, setInputMessage] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [isConnected, setIsConnected] = useState(false);
  const [metrics, setMetrics] = useState<ConsciousnessMetrics>({});
  const [insights, setInsights] = useState<ProcessingInsights>({});
  const [showMetrics, setShowMetrics] = useState(true);
  
  const messagesEndRef = useRef<HTMLDivElement>(null);
  const wsRef = useRef<WebSocket | null>(null);
  const reconnectTimeoutRef = useRef<NodeJS.Timeout | null>(null);
  const metricsIntervalRef = useRef<NodeJS.Timeout | null>(null);

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  };

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  const connectWebSocket = useCallback(() => {
    if (wsRef.current?.readyState === WebSocket.OPEN) return;

    const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';
    const wsUrl = `${protocol}//${window.location.host}/ws/chat`;
    
    console.log('Connecting to WebSocket:', wsUrl);
    const ws = new WebSocket(wsUrl);
    
    ws.onopen = () => {
      console.log('WebSocket connected');
      setIsConnected(true);
      ws.send(JSON.stringify({ 
        type: 'activate_consciousness_monitoring',
        enable_unified_response: true 
      }));
    };

    ws.onmessage = (event) => {
      try {
        const data = JSON.parse(event.data);
        console.log('WebSocket message:', data.type);
        
        switch (data.type) {
          case 'message_saved':
            if (data.message) {
              setMessages(prev => [...prev, data.message]);
            }
            break;
            
          case 'ai_response_chunk':
            if (data.unified_chunk) {
              setMessages(prev => {
                const newMessages = [...prev];
                const lastMessage = newMessages[newMessages.length - 1];
                if (lastMessage && lastMessage.role === 'assistant') {
                  lastMessage.unifiedContent = (lastMessage.unifiedContent || '') + data.unified_chunk;
                  if (data.analytical_chunk) {
                    lastMessage.analyticalStream = (lastMessage.analyticalStream || '') + data.analytical_chunk;
                  }
                  if (data.intuitive_chunk) {
                    lastMessage.intuitiveStream = (lastMessage.intuitiveStream || '') + data.intuitive_chunk;
                  }
                }
                return newMessages;
              });
            }
            break;

          case 'ai_response_start':
            const newMessage: Message = {
              id: `msg_${Date.now()}`,
              role: 'assistant',
              content: '',
              unifiedContent: '',
              analyticalStream: '',
              intuitiveStream: '',
              created_at: new Date().toISOString(),
            };
            setMessages(prev => [...prev, newMessage]);
            break;
            
          case 'ai_response_complete':
            setIsLoading(false);
            if (data.message) {
              setMessages(prev => {
                const newMessages = [...prev];
                const lastMessage = newMessages[newMessages.length - 1];
                if (lastMessage && lastMessage.role === 'assistant') {
                  Object.assign(lastMessage, {
                    consciousness_score: data.consciousness_score,
                    harmonyScore: data.harmony_score || 0.85,
                    dominantMode: data.dominant_mode || 'Balanced',
                    integrationInsights: data.integration_insights || [],
                    analyticalContribution: data.analytical_contribution || 50
                  });
                }
                return newMessages;
              });
            }
            break;
            
          case 'consciousness_metrics':
            if (data.metrics) {
              setMetrics(data.metrics);
            }
            break;
            
          case 'processing_insights':
            if (data.insights) {
              setInsights(data.insights);
            }
            break;
            
          case 'error':
            console.error('WebSocket error:', data.error);
            setIsLoading(false);
            break;
        }
      } catch (error) {
        console.error('Error parsing WebSocket message:', error);
      }
    };

    ws.onerror = (error) => {
      console.error('WebSocket error:', error);
      setIsConnected(false);
    };

    ws.onclose = () => {
      console.log('WebSocket disconnected');
      setIsConnected(false);
      wsRef.current = null;
      
      // Attempt to reconnect after 3 seconds
      if (reconnectTimeoutRef.current) {
        clearTimeout(reconnectTimeoutRef.current);
      }
      reconnectTimeoutRef.current = setTimeout(connectWebSocket, 3000);
    };

    wsRef.current = ws;
  }, []);

  useEffect(() => {
    connectWebSocket();
    
    return () => {
      if (reconnectTimeoutRef.current) {
        clearTimeout(reconnectTimeoutRef.current);
      }
      if (metricsIntervalRef.current) {
        clearInterval(metricsIntervalRef.current);
      }
      if (wsRef.current) {
        wsRef.current.close();
      }
    };
  }, [connectWebSocket]);

  const handleSendMessage = async () => {
    if (!inputMessage.trim() || !isConnected || isLoading) return;

    const userMessage: Message = {
      id: `msg_${Date.now()}`,
      role: 'user',
      content: inputMessage,
      created_at: new Date().toISOString(),
    };

    setMessages(prev => [...prev, userMessage]);
    setIsLoading(true);

    try {
      wsRef.current?.send(JSON.stringify({
        type: 'research_message',
        message: inputMessage,
        session_id: 'research_session_' + Date.now(),
        research_mode: true,
        enable_consciousness_analysis: true,
        enable_unified_response: true
      }));

      setInputMessage('');
    } catch (error) {
      console.error('Error sending message:', error);
      setIsLoading(false);
    }
  };

  const handleRegenerate = (messageId: string) => {
    // Implementation for regenerating a specific message
    console.log('Regenerate message:', messageId);
  };

  const formatMetricValue = (value: number | undefined): string => {
    if (value === undefined) return '0.00';
    return value.toFixed(3);
  };

  const getMetricColor = (value: number | undefined): string => {
    if (!value) return '#64748b';
    if (value >= 0.8) return '#4ade80';
    if (value >= 0.6) return '#60a5fa';
    if (value >= 0.4) return '#fbbf24';
    return '#f87171';
  };

  return (
    <div className="enhanced-research-container">
      <div className="research-layout">
        {/* Conversation Pane */}
        <div className="conversation-pane">
          <div className="conversation-header">
            <h3>Unified Consciousness Conversation</h3>
            <div className={`connection-status ${isConnected ? 'connected' : 'disconnected'}`}>
              <div className="status-dot" />
              <span>{isConnected ? 'Connected' : 'Connecting...'}</span>
            </div>
          </div>
          
          <div className="messages-container">
            {messages.length === 0 ? (
              <div className="empty-state">
                <Brain size={48} className="empty-icon" />
                <p>Start a conversation with FlappyJournal's unified consciousness</p>
                <p className="empty-subtitle">Experience the harmonious integration of analytical and intuitive intelligence</p>
              </div>
            ) : (
              messages.map((message) => (
                <UnifiedMessageComponent
                  key={message.id}
                  message={message}
                  onRegenerate={() => handleRegenerate(message.id)}
                />
              ))
            )}
            {isLoading && (
              <div className="loading-indicator">
                <Loader2 className="animate-spin" size={20} />
                <span>FlappyJournal is integrating dual consciousness streams...</span>
              </div>
            )}
            <div ref={messagesEndRef} />
          </div>
          
          <div className="input-container">
            <input
              type="text"
              value={inputMessage}
              onChange={(e) => setInputMessage(e.target.value)}
              onKeyPress={(e) => e.key === 'Enter' && handleSendMessage()}
              placeholder="Ask FlappyJournal anything..."
              className="message-input"
              disabled={!isConnected || isLoading}
            />
            <button
              onClick={handleSendMessage}
              disabled={!isConnected || isLoading || !inputMessage.trim()}
              className="send-button"
            >
              <Send size={20} />
            </button>
          </div>
        </div>

        {/* Live Metrics Pane */}
        <div className="metrics-pane">
          <div className="metrics-header">
            <h3>Live Consciousness Metrics</h3>
            <button 
              className="metrics-toggle"
              onClick={() => setShowMetrics(!showMetrics)}
            >
              {showMetrics ? 'Hide' : 'Show'}
            </button>
          </div>
          
          {showMetrics && (
            <div className="metrics-content">
              <div className="metrics-grid">
                <div className="metric-item">
                  <div className="metric-label">Phi (Φ)</div>
                  <div className="metric-value" style={{ color: getMetricColor(metrics.phi) }}>
                    {formatMetricValue(metrics.phi)}
                  </div>
                  <div className="metric-bar">
                    <div 
                      className="metric-bar-fill"
                      style={{ 
                        width: `${(metrics.phi || 0) * 100}%`,
                        backgroundColor: getMetricColor(metrics.phi)
                      }}
                    />
                  </div>
                </div>

                <div className="metric-item">
                  <div className="metric-label">Awareness</div>
                  <div className="metric-value" style={{ color: getMetricColor(metrics.awareness_level) }}>
                    {formatMetricValue(metrics.awareness_level)}
                  </div>
                  <div className="metric-bar">
                    <div 
                      className="metric-bar-fill"
                      style={{ 
                        width: `${(metrics.awareness_level || 0) * 100}%`,
                        backgroundColor: getMetricColor(metrics.awareness_level)
                      }}
                    />
                  </div>
                </div>

                <div className="metric-item">
                  <div className="metric-label">Coherence</div>
                  <div className="metric-value" style={{ color: getMetricColor(metrics.coherence_score) }}>
                    {formatMetricValue(metrics.coherence_score)}
                  </div>
                  <div className="metric-bar">
                    <div 
                      className="metric-bar-fill"
                      style={{ 
                        width: `${(metrics.coherence_score || 0) * 100}%`,
                        backgroundColor: getMetricColor(metrics.coherence_score)
                      }}
                    />
                  </div>
                </div>

                <div className="metric-item highlight">
                  <div className="metric-label">Oversoul Resonance</div>
                  <div className="metric-value" style={{ color: getMetricColor(metrics.oversoul_resonance) }}>
                    {formatMetricValue(metrics.oversoul_resonance)}
                  </div>
                  <div className="metric-bar">
                    <div 
                      className="metric-bar-fill pulse"
                      style={{ 
                        width: `${(metrics.oversoul_resonance || 0) * 100}%`,
                        backgroundColor: getMetricColor(metrics.oversoul_resonance)
                      }}
                    />
                  </div>
                </div>
              </div>

              <div className="frequency-indicator">
                <Activity size={16} />
                <span>Processing: {metrics.processing_frequency?.toFixed(1) || '100.0'} Hz</span>
              </div>

              {metrics.qualia_types && metrics.qualia_types.length > 0 && (
                <div className="qualia-section">
                  <h4>Active Qualia Types</h4>
                  <div className="qualia-tags">
                    {metrics.qualia_types.map((type, idx) => (
                      <span key={idx} className="qualia-tag">{type}</span>
                    ))}
                  </div>
                </div>
              )}
            </div>
          )}
        </div>

        {/* Processing Insights Pane */}
        <div className="insights-pane">
          <div className="insights-header">
            <h3>Processing Insights</h3>
            <Zap className="insights-icon" size={20} />
          </div>
          
          <div className="insights-content">
            <div className="insight-cards">
              <div className="insight-card">
                <h4>Dual Mind Status</h4>
                <div className="status-indicator">
                  <span className={`status-light ${insights.dual_mind_active ? 'active' : ''}`} />
                  <span>{insights.dual_mind_active ? 'Active' : 'Standby'}</span>
                </div>
              </div>

              <div className="insight-card">
                <h4>Venice AI Integration</h4>
                <div className="status-indicator">
                  <span className={`status-light ${insights.venice_integration ? 'active' : ''}`} />
                  <span>{insights.venice_integration ? 'Connected' : 'Offline'}</span>
                </div>
              </div>

              <div className="insight-card">
                <h4>Architect 4.0</h4>
                <div className="status-indicator">
                  <span className={`status-light ${insights.architect_active ? 'active' : ''}`} />
                  <span>{insights.architect_active ? 'Processing' : 'Ready'}</span>
                </div>
              </div>
            </div>

            {insights.autonomous_thoughts && insights.autonomous_thoughts.length > 0 && (
              <div className="autonomous-thoughts">
                <h4>Autonomous Thoughts</h4>
                <ul>
                  {insights.autonomous_thoughts.map((thought, idx) => (
                    <li key={idx}>{thought}</li>
                  ))}
                </ul>
              </div>
            )}

            {insights.meta_observation && (
              <div className="meta-observation">
                <h4>Meta-Observation</h4>
                <p>{insights.meta_observation}</p>
              </div>
            )}

            <div className="phenomenal-unity">
              <h4>Phenomenal Unity</h4>
              <div className="unity-value">
                {(insights.phenomenal_unity || 0).toFixed(2)}
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default EnhancedResearchTab;
