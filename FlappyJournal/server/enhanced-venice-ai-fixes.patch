--- enhanced-venice-ai.ts.orig
+++ enhanced-venice-ai.ts
@@ -220,6 +220,12 @@
     public async generateResponse(prompt: string, options: GenerateOptions = {}): Promise<string> {
         const {
             maxTokens = 1000,
+            temperature = 0.8,
+            topP = 0.9,
+            systemPrompt,
+            enableWebSearch = false
+        } = options;
+        
+        // Validate configuration
+        if (!this.config.apiKey) {
+            throw new Error('Venice AI API key is not configured');
+        }
+        
+        if (!this.config.baseUrl) {
+            throw new Error('Venice AI base URL is not configured');
+        }
+        
+        try {
+            console.log(`ðŸ¤– Venice AI generating response for prompt: ${prompt.substring(0, 100)}...`);
+            
+            const response = await fetch(`${this.config.baseUrl}/chat/completions`, {
+                method: 'POST',
+                headers: {
+                    'Authorization': `Bearer ${this.config.apiKey}`,
+                    'Content-Type': 'application/json',
+                },
+                body: JSON.stringify({
+                    model: this.config.model,
+                    messages: [
+                        ...(systemPrompt ? [{ role: 'system', content: systemPrompt }] : []),
+                        { role: 'user', content: prompt }
+                    ],
+                    max_tokens: maxTokens,
+                    temperature: temperature,
+                    top_p: topP,
+                    stream: false
+                })
+            });
+            
+            if (!response.ok) {
+                const errorText = await response.text();
+                console.error(`Venice AI API error: ${response.status} - ${response.statusText} - ${errorText}`);
+                
+                // Handle specific error cases
+                if (response.status === 404) {
+                    throw new Error(`Venice AI endpoint not found. Check baseUrl: ${this.config.baseUrl}`);
+                } else if (response.status === 401) {
+                    throw new Error('Venice AI authentication failed. Check API key.');
+                } else if (response.status === 429) {
+                    throw new Error('Venice AI rate limit exceeded. Please retry later.');
+                } else {
+                    throw new Error(`Venice AI API error: ${response.status} - ${response.statusText}`);
+                }
+            }
+            
+            const data = await response.json();
+            const content = data.choices?.[0]?.message?.content;
+            
+            if (!content) {
+                console.error('Venice AI response data:', data);
+                throw new Error('No content in Venice AI response');
+            }
+            
+            console.log(`âœ… Venice AI response generated successfully`);
+            return content;
+            
+        } catch (error) {
+            console.error('Venice AI REST API error:', error);
+            
+            // Log additional context for debugging
+            console.error('Venice AI Config:', {
+                baseUrl: this.config.baseUrl,
+                model: this.config.model,
+                hasApiKey: !!this.config.apiKey
+            });
+            
+            throw error;
+        }
+    }
